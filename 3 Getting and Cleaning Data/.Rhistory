# install.packages("ggplot2")
# install.packages("caret")
library(ggplot2)
library(caret)
library(ggplot2)
library(caret)
install.packages("ggplot2")
install.pachages("caret")
install.packages("caret")
library(ggplot2)
library(caret)
library(doSNOW)
install.packages("cluster")
install.packages("parallel")
install.packages("parallel")
install.packages("doSNOW")
source('~/.active-rstudio-document')
modFitRF = train(Price~.,data=training,method="rf", importance = T) #randomForest, can take a while
#modFitRF = train(Price~.,data=training,method="rf", importance = T) #randomForest, can take a while
modFitRF = train(Price~.,data=training,method="rf", importance = T) #randomForest, can take a while
install.packages("doSNOW")
install.packages("doSNOW")
library(ggplot2)
library(caret)
data(cars)
library(cluster)
library(parallel)
library(doSNOW)
coreNumber=max(detectCores(),1)
cluster=makeCluster(coreNumber, type = "SOCK",outfile="")
registerDoSNOW(cluster)
set.seed(2291033)
#prepare the data, 70% train, 30% test
inTrain = createDataPartition(y=cars$Price,p=0.7,list=F)
training = cars[inTrain,]
testing = cars[-inTrain,]
#fit the model
modFitRF = train(Price~.,data=training,method="rf", importance = T) #randomForest, can take a while
x <- c(4, "a", TRUE)
x
x <- c(4, "a")
x
x <- c(4, 5)
x
x <-(1,3,5)
x <- c(1,3,5);
y <- c(3,2,10);
rbind(x,y);
x <- list(2, "a", "b", TRUE)
x[[2]]
x[2]
x <- 1:4
y <- 2
x+y
x <- c(3, 5, 1, 10, 12, 6)
x[x < 6] == 0
x
x[x <= 5] <- 0
x
ls
data <- read.csv("hw1_data.csv");
cd Downloads
data <- read.csv("Downloads/hw1_data.csv");
View(data)
data(1:2,)
data(1,)
View(data)
typeof(data)
data(1,);
data[1:2,]
data[-1:-2,]
data[-1,]
data[152:153,]
data[47,1]
data[47]
data[47,]
which(is,na(data$Ozone))
which(is,na(data$Ozone));
which(is.na(data$Ozone));
length(which(is.na(data$Ozone)));
bad <- is.na(data$Ozone);
mean(data[!bad]);
bad
wanted <- which(data[!bad]);
wanted <- which(data$Ozone[!bad]);
(data$Ozone[!bad]);
mean(data$Ozone[!bad]);
wanted <- data$Ozone[>31]
wanted <- data$Ozone[x>31]
wanted <- data$Ozone[data$Ozone>31]
wanted <- data[data$Ozone>31]
wanted <- data[data$Ozone>31,][data$Temp>90,]
wanted
wanted <- data[data$Ozone>31,]
wanted
wanted <- data[data$Ozone>31,][data$Temp>90,]
good <- ! is.na(wanted$Solar.R)
mean(wanted[good])
wanted[good]
wanted[good]
mean(wanted$Solar.R[good])
tempData <- data$Temp[data$Month==6,];
tempData <- data[data$Month==6,];
tempData
mean(tempData$Temp, na.rm = TRUE)
data[data$Month==5,]$Ozone
max(data[data$Month==5,]$Ozone, na.rm = TRUE)
x <- 4L
typeof(x)
x <- c(4, "a", TRUE)
x
x <- c(1,3, 5)
x
y <- c(3, 2, 10),
y <- c(3, 2, 10)
cbind(x,y)
r = cbind(x,y)
r
x <- list(2, "a", "b", TRUE)
x[1]
x[[1]
]
x <- c(17, 14, 4, 5, 13, 12, 10)
x[x >= 11] <- 4
x
data[152:153]
data[152:153,]
data$Ozone[47,]
data$Ozone[47]
length(is.na(data$Ozone))
lenght(which(is.na(data$Ozone))
)
lengh(which(is.na(data$Ozone)))
length(which(is.na(data$Ozone)))
mean(which(is.na(data$Ozone)))
mean(data$Ozone, na.rm = TRUE)
mean(data[data$Ozone>31,][data$Temp>90,]$Solar.R, na.rm = TRUE)
mean(data[data$Month==6,]$Temp)
max(data[data$Month==5,]$Ozone)
max(data[data$Month==5,]$Ozone,na.rm = TRUE)
mean(data[data$Month==6,]$Temp, na.rm = TRUE)
x <- c(4, "a", TRUE)
X
x
x <- c(1,3, 5)
y <- c(3, 2, 10)
cbind(x,y)
x <- list(2, "a", "b", TRUE)
x[[1]]
x <- 1:4
y <- 2:3
x +y
x <- c(3, 5, 1, 10, 12, 6)
x[x %in% 1:5] <- 0
x
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
clear
clean
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
ls()
source('~/Documents/dev/courses/coursera/R_Programming/ass2/ProgrammingAssignment2/cachematrix.R')
source('~/Documents/dev/courses/coursera/R_Programming/ass2/ProgrammingAssignment2/cachematrix.R')
m <- matrix(c(-1, -2, 1, 1), 2,2)
x <- makeCacheMatrix(m)
source('~/Documents/dev/courses/coursera/R_Programming/ass2/ProgrammingAssignment2/cachematrix.R')
source('~/Documents/dev/courses/coursera/R_Programming/ass2/ProgrammingAssignment2/cachematrix.R')
x <- makeCacheMatrix(m)
x$get()
inv <- cacheSolve(x)
inv
inv <- cacheSolve(x)
inv
source('~/Documents/dev/courses/coursera/R_Programming/ass2/ProgrammingAssignment2/cachematrix.R')
source('~/Documents/dev/courses/coursera/R_Programming/ass2/ProgrammingAssignment2/cachematrix.R')
inv <- cacheSolve(x)
inv
x <- makeCacheMatrix(m)
source('~/Documents/dev/courses/coursera/R_Programming/ass2/ProgrammingAssignment2/cachematrix.R')
source('~/Documents/dev/courses/coursera/R_Programming/ass2/ProgrammingAssignment2/cachematrix.R')
source('~/Documents/dev/courses/coursera/R_Programming/ass2/ProgrammingAssignment2/cachematrix.R')
source('~/Documents/dev/courses/coursera/R_Programming/ass2/ProgrammingAssignment2/cachematrix.R')
source('~/Documents/dev/courses/coursera/R_Programming/ass2/ProgrammingAssignment2/cachematrix.R')
?? commits
"?? commits"
?"comments"
'??commits'
m <- matrix(c(1,0,4, 1,3,4 , 4,1,0),3,3)
source('~/Documents/dev/courses/coursera/R_Programming/ass2/ProgrammingAssignment2/cachematrix.R')
x <- makeCacheMatrix(m)
x$get
x$get()
m <- matrix(c(1,1,4, 0,3,1 , 4,4,0),3,3)
x <- makeCacheMatrix(m)
x$get()
inv <- cacheSolve(x)
inv
x2 <- matrix(c(3,5,1, 6,2,2, 3,1,1) ,3 , 3)
makeCacheMatrix(x2)
m2 <- makeCacheMatrix(x2)
m2
m2$get()
inv2 <- cacheSolve(m2)
source('~/Documents/dev/courses/coursera/R_Programming/ass2/ProgrammingAssignment2/cachematrix.R')
makeCacheMatrix(x2)
m2 <- makeCacheMatrix(x2)
makeCacheMatrix(x2)
m2 <- makeCacheMatrix(x2)
m2$get()
cacheSolve(m2)
source('~/Documents/dev/courses/coursera/R_Programming/ass2/ProgrammingAssignment2/cachematrix.R')
cacheSolve(m2)
source('~/Documents/dev/courses/coursera/R_Programming/ass2/ProgrammingAssignment2/cachematrix.R')
cacheSolve(m2)
source('~/Documents/dev/courses/coursera/R_Programming/ass2/ProgrammingAssignment2/cachematrix.R')
cacheSolve(m)
inv <- cacheSolve(m)
m <- matrix(c(1,1,4, 0,3,1 , 4,4,0),3,3)
x <- makeCacheMatrix()
x$get()
x <- makeCacheMatrix(m)
x$get()
inv <- cacheSolve(x)
inv
inv <- cacheSolve(x)
inv
sqldf("select pwgtp1 from acs where AGEP < 50")
library(sqldf)
install.packages(tcltk)
install.packages('tcltk')
library(sqldf)
sqldf("select pwgtp1 from acs where AGEP < 50")
setwd(dir='/Users/gemengqin/Documents/dev/courses/coursera/Data Science/datasciencecoursera//3 Getting and Cleaning Data')
read.csv('getdata-data-ss06hid.csv')
data<- read.csv('getdata-data-ss06hid.csv')
acs<- read.csv('getdata-data-ss06hid.csv')
sqldf("select pwgtp1 from acs where AGEP < 50")
sqldf("select * from acs where AGEP < 50 and pwgtp1")
sqldf("select * from acs where AGEP < 50")
names(acs)
sqldf("select pwgtp1 from acs")
acs$AGEP
head(acs, 5)
head(acs, 1)
acs<- read.csv('getdata-data-ss06pid.csv')
sqldf("select * from acs where AGEP < 50")
sqldf("select pwgtp1 from acs where AGEP < 50")
a <- sqldf("select pwgtp1 from acs where AGEP < 50")
names(a)
b <- sqldf("select * from acs where AGEP < 50 and pwgtp1")
name(b)
names(b)
sqldf("select distinct AGEP from acs")
a <- sqldf("select distinct AGEP from acs")
b <-acs$AGEP
content <- url("http://biostat.jhsph.edu/~jleek/contact.html")
content
htmlcode <- readLines(content)
close(content)
class(htmlcode)
htmlcode
nchar(htmlcode[10,20,30,100])
nchar(htmlcode[c(10,20,30,100)])
read.fortran('getdata-wksst8110.for')
read.csv('getdata-wksst8110.for')
data <- read.csv('getdata-wksst8110.for')
names(data)
data <- read.fortran('getdata-wksst8110.for')
data <- read.fwf('getdata-wksst8110.for')
data <- read.fwf('getdata-wksst8110.for', c(9,9) )
data
names(data)
data <- read.fwf('getdata-wksst8110.for', c(10,9) )
data
data <- read.fwf('getdata-wksst8110.for', c(10,9), skip=" " )
x <- read.fwf(
file=url("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for"),
skip=4,
widths=c(12, 7,4, 9,4, 9,4, 9,4))
sum(x$V4)
view(x)
View(x)
x <- read.fwf(
file='getdata-wksst8110.for',
skip=4,
widths=c(12, 7,4, 9,4, 9,4, 9,4))
x <- read.fwf(
file='getdata-wksst8110.for',
skip=4,
widths=c(12, 7,4, 9,4, 9,4, 9,4))
x
sum(x$V4)
a <- unique(acs$AGEP)
b <- sqldf("select AGEP where unique from acs")
b <- sqldf("select unique AGEP from acs")
b <- sqldf("select distinct AGEP from acs")
