# install.packages("ggplot2")
# install.packages("caret")
library(ggplot2)
library(caret)
library(ggplot2)
library(caret)
install.packages("ggplot2")
install.pachages("caret")
install.packages("caret")
library(ggplot2)
library(caret)
library(doSNOW)
install.packages("cluster")
install.packages("parallel")
install.packages("parallel")
install.packages("doSNOW")
source('~/.active-rstudio-document')
modFitRF = train(Price~.,data=training,method="rf", importance = T) #randomForest, can take a while
#modFitRF = train(Price~.,data=training,method="rf", importance = T) #randomForest, can take a while
modFitRF = train(Price~.,data=training,method="rf", importance = T) #randomForest, can take a while
install.packages("doSNOW")
install.packages("doSNOW")
library(ggplot2)
library(caret)
data(cars)
library(cluster)
library(parallel)
library(doSNOW)
coreNumber=max(detectCores(),1)
cluster=makeCluster(coreNumber, type = "SOCK",outfile="")
registerDoSNOW(cluster)
set.seed(2291033)
#prepare the data, 70% train, 30% test
inTrain = createDataPartition(y=cars$Price,p=0.7,list=F)
training = cars[inTrain,]
testing = cars[-inTrain,]
#fit the model
modFitRF = train(Price~.,data=training,method="rf", importance = T) #randomForest, can take a while
x <- c(4, "a", TRUE)
x
x <- c(4, "a")
x
x <- c(4, 5)
x
x <-(1,3,5)
x <- c(1,3,5);
y <- c(3,2,10);
rbind(x,y);
x <- list(2, "a", "b", TRUE)
x[[2]]
x[2]
x <- 1:4
y <- 2
x+y
x <- c(3, 5, 1, 10, 12, 6)
x[x < 6] == 0
x
x[x <= 5] <- 0
x
ls
data <- read.csv("hw1_data.csv");
cd Downloads
data <- read.csv("Downloads/hw1_data.csv");
View(data)
data(1:2,)
data(1,)
View(data)
typeof(data)
data(1,);
data[1:2,]
data[-1:-2,]
data[-1,]
data[152:153,]
data[47,1]
data[47]
data[47,]
which(is,na(data$Ozone))
which(is,na(data$Ozone));
which(is.na(data$Ozone));
length(which(is.na(data$Ozone)));
bad <- is.na(data$Ozone);
mean(data[!bad]);
bad
wanted <- which(data[!bad]);
wanted <- which(data$Ozone[!bad]);
(data$Ozone[!bad]);
mean(data$Ozone[!bad]);
wanted <- data$Ozone[>31]
wanted <- data$Ozone[x>31]
wanted <- data$Ozone[data$Ozone>31]
wanted <- data[data$Ozone>31]
wanted <- data[data$Ozone>31,][data$Temp>90,]
wanted
wanted <- data[data$Ozone>31,]
wanted
wanted <- data[data$Ozone>31,][data$Temp>90,]
good <- ! is.na(wanted$Solar.R)
mean(wanted[good])
wanted[good]
wanted[good]
mean(wanted$Solar.R[good])
tempData <- data$Temp[data$Month==6,];
tempData <- data[data$Month==6,];
tempData
mean(tempData$Temp, na.rm = TRUE)
data[data$Month==5,]$Ozone
max(data[data$Month==5,]$Ozone, na.rm = TRUE)
x <- 4L
typeof(x)
x <- c(4, "a", TRUE)
x
x <- c(1,3, 5)
x
y <- c(3, 2, 10),
y <- c(3, 2, 10)
cbind(x,y)
r = cbind(x,y)
r
x <- list(2, "a", "b", TRUE)
x[1]
x[[1]
]
x <- c(17, 14, 4, 5, 13, 12, 10)
x[x >= 11] <- 4
x
data[152:153]
data[152:153,]
data$Ozone[47,]
data$Ozone[47]
length(is.na(data$Ozone))
lenght(which(is.na(data$Ozone))
)
lengh(which(is.na(data$Ozone)))
length(which(is.na(data$Ozone)))
mean(which(is.na(data$Ozone)))
mean(data$Ozone, na.rm = TRUE)
mean(data[data$Ozone>31,][data$Temp>90,]$Solar.R, na.rm = TRUE)
mean(data[data$Month==6,]$Temp)
max(data[data$Month==5,]$Ozone)
max(data[data$Month==5,]$Ozone,na.rm = TRUE)
mean(data[data$Month==6,]$Temp, na.rm = TRUE)
x <- c(4, "a", TRUE)
X
x
x <- c(1,3, 5)
y <- c(3, 2, 10)
cbind(x,y)
x <- list(2, "a", "b", TRUE)
x[[1]]
x <- 1:4
y <- 2:3
x +y
x <- c(3, 5, 1, 10, 12, 6)
x[x %in% 1:5] <- 0
x
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
clear
clean
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
ls()
source('~/Documents/dev/courses/coursera/R_Programming/ass2/ProgrammingAssignment2/cachematrix.R')
source('~/Documents/dev/courses/coursera/R_Programming/ass2/ProgrammingAssignment2/cachematrix.R')
m <- matrix(c(-1, -2, 1, 1), 2,2)
x <- makeCacheMatrix(m)
source('~/Documents/dev/courses/coursera/R_Programming/ass2/ProgrammingAssignment2/cachematrix.R')
source('~/Documents/dev/courses/coursera/R_Programming/ass2/ProgrammingAssignment2/cachematrix.R')
x <- makeCacheMatrix(m)
x$get()
inv <- cacheSolve(x)
inv
inv <- cacheSolve(x)
inv
source('~/Documents/dev/courses/coursera/R_Programming/ass2/ProgrammingAssignment2/cachematrix.R')
source('~/Documents/dev/courses/coursera/R_Programming/ass2/ProgrammingAssignment2/cachematrix.R')
inv <- cacheSolve(x)
inv
x <- makeCacheMatrix(m)
source('~/Documents/dev/courses/coursera/R_Programming/ass2/ProgrammingAssignment2/cachematrix.R')
source('~/Documents/dev/courses/coursera/R_Programming/ass2/ProgrammingAssignment2/cachematrix.R')
source('~/Documents/dev/courses/coursera/R_Programming/ass2/ProgrammingAssignment2/cachematrix.R')
source('~/Documents/dev/courses/coursera/R_Programming/ass2/ProgrammingAssignment2/cachematrix.R')
source('~/Documents/dev/courses/coursera/R_Programming/ass2/ProgrammingAssignment2/cachematrix.R')
?? commits
"?? commits"
?"comments"
'??commits'
m <- matrix(c(1,0,4, 1,3,4 , 4,1,0),3,3)
source('~/Documents/dev/courses/coursera/R_Programming/ass2/ProgrammingAssignment2/cachematrix.R')
x <- makeCacheMatrix(m)
x$get
x$get()
m <- matrix(c(1,1,4, 0,3,1 , 4,4,0),3,3)
x <- makeCacheMatrix(m)
x$get()
inv <- cacheSolve(x)
inv
x2 <- matrix(c(3,5,1, 6,2,2, 3,1,1) ,3 , 3)
makeCacheMatrix(x2)
m2 <- makeCacheMatrix(x2)
m2
m2$get()
inv2 <- cacheSolve(m2)
source('~/Documents/dev/courses/coursera/R_Programming/ass2/ProgrammingAssignment2/cachematrix.R')
makeCacheMatrix(x2)
m2 <- makeCacheMatrix(x2)
makeCacheMatrix(x2)
m2 <- makeCacheMatrix(x2)
m2$get()
cacheSolve(m2)
source('~/Documents/dev/courses/coursera/R_Programming/ass2/ProgrammingAssignment2/cachematrix.R')
cacheSolve(m2)
source('~/Documents/dev/courses/coursera/R_Programming/ass2/ProgrammingAssignment2/cachematrix.R')
cacheSolve(m2)
source('~/Documents/dev/courses/coursera/R_Programming/ass2/ProgrammingAssignment2/cachematrix.R')
cacheSolve(m)
inv <- cacheSolve(m)
m <- matrix(c(1,1,4, 0,3,1 , 4,4,0),3,3)
x <- makeCacheMatrix()
x$get()
x <- makeCacheMatrix(m)
x$get()
inv <- cacheSolve(x)
inv
inv <- cacheSolve(x)
inv
swirl()
library(swirl)
swirl()
extract_numeric("class5")
info()
bye()
swirl()
reset()
swirl()
library(swirl)
ls()
clear()
clean()
rm(list=ls())
swirl()
reset()
library(sqldf)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(fileUrl, destfile = "w3q1.csv", method = "curl")
dateDownloaded <- date()
dateDownloaded
source('~/Documents/dev/courses/coursera/Data Science/datasciencecoursera/3 Getting and Cleaning Data/w3/w3q1.R')
head(acs)
agricultureLogical<-(acs$ACR==3 & acs$AGS==6)
which(agricultureLogical)
class(agricultureLogical)
install.packages("jpeg")
install.packages(jpeg)
install.packages('jpeg')
library(jpeg)
install.packages("jpeg")
install.packages("jpeg")
library(jpeg)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
download.file(fileUrl, destfile = "jeff.jpg", method = "curl")
getwd()
setwd("/Users/gemengqin/Documents/dev/courses/coursera/Data Science/datasciencecoursera/3 Getting and Cleaning Data/w3/")
getwd()
download.file(fileUrl, destfile = "jeff.jpg", method = "curl")
img.n<-readJPEG("jeff.jpg",TRUE)
quantile(img.n,probs=c(0.3,0.8))
fileSource <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
download.file(fileSource, destfile="FGDP.csv", method="curl")
fileSourceGDP <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
download.file(fileSourceGDP, destfile="FGDP.csv", method="curl")
fileSourceEDU <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
download.file(fileSourceEDU, destfile="EDU.csv", method="curl")
gdp <- read.csv("FGDP.csv")
edu <- read.csv("EDU.csv")
X=CountryCode
names(gdp)
names(edu)
head(gdp)
head(edu)
gdpclean<-gdp[5:194,]
mergedData=as.data.frame(merge(gdpclean,edu,by.x="X",by.y="CountryCode"))
mergedData$Gross.domestic.product.2012 = as.numeric(as.character(mergedData$Gross.domestic.product.2012))
summary(mergedData[mergedData$Income.Group=="High income: OECD",])
summary(mergedData[mergedData$Income.Group=="High income: OECD",])
quantile(mergedData$Gross.domestic.product.2012,probs=c(0.2,0.4,0.6,0.8,1))
library(Hmisc)
install.packages("Hmisc")
library(Hmisc)
mergedData$gdp=cut2(mergedData$Gross.domestic.product.2012,g=5)
table(mergedData$Income.Group,mergedData$gdp)
View(mergedData)
library(plyr)
result <- arrange(mergedData,desc(Ranking))
result <- arrange(mergedData,desc(mergedData$Ranking))
table(mergedData$Income.Group,mergedData$gdp)
summary(mergedData[mergedData$Income.Group=="High income: OECD",])
quantile(mergedData$Gross.domestic.product.2012,probs=c(0.2,0.4,0.6,0.8,1))
mergedData$gdp=cut2(mergedData$Gross.domestic.product.2012,g=5)
table(mergedData$Income.Group,mergedData$gdp)
